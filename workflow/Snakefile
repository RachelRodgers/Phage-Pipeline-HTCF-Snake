"""
Snakefile for running phage assembly from Hecatomb QC'd reads.

Rachel Rodgers, June 2021

Updating all branches for new HTCF cluster October 2022.
"""

import os
import sys

#----- Snakemake Set Up -----#

configfile: "./config/phage_pipeline_config.yaml"

# Paths

HECATOMB_DIR = config["Paths"]["Hecatomb"]

# Write out the CT2 template path and environment path:

SCRIPTS = os.path.join("workflow", "scripts")

if not os.path.exists(SCRIPTS):
	os.makedirs(SCRIPTS)

ct2Template = open(os.path.join(SCRIPTS, "ct2Temp.txt"), "w")
CT2_TEMPLATE = config["Paths"]["CT2_template"]
ct2Template.write(CT2_TEMPLATE)
ct2Template.close()

ct2Env = open(os.path.join(SCRIPTS, "ct2Env.txt"), "w")
CT2_ENV = config["Paths"]["CT2"]
ct2Env.write(CT2_ENV)
ct2Env.close()

# Tools
CT2 = config["Tools"]["CT2"]
BBTOOLS = config["Tools"]["BBTools"]
MEGAHIT = config["Tools"]["megahit"]
SEQKIT = config["Tools"]["SeqKit"]
FLYE = config["Tools"]["flye"]
R = config["Tools"]["R"]

# Paths
CT2_PATH = config["Paths"]["CT2"]
CT2_TEMPLATE = config["Paths"]["CT2_template"]

#----- Collect the Input Files -----#

# Pull sample names from the Hecatomb step 7 QC'd files and store in list
SAMPLES, = glob_wildcards(os.path.join(HECATOMB_DIR, "results", "QC", "step_7", "{sample}_R1.s7.out.fastq"))

#----- Rules -----#

rule all:
	input:
		os.path.join("results", "contig_abundance_table", "contig_abundance_table.txt"),
		os.path.join("results", "ct2_annotated_contig_dictionary", "ct2AnnoDict_CONTIG_SUMMARY.tsv"),
		expand(os.path.join("results", "quantification", "{sample}.rpkm"), sample = SAMPLES)

rule get_r2_singletons:
	"""
	Split R2 singletons
	"""
	input:
		os.path.join(HECATOMB_DIR, "results", "QC", "step_7", "{sample}_singletons.s7.out.fastq")
	output:
		os.path.join(HECATOMB_DIR, "results", "QC", "step_7", "{sample}_singletons_R2.out.fastq")
	shell:
		"""
		grep -A 3 '2:N:' {input} | sed '/^--$/d' > {output}
		"""

rule bbnorm:
	"""
	Digital normalization with BBNorm
	"""
	input:
		r1 = os.path.join(HECATOMB_DIR, "results", "QC", "step_7", "{sample}_R1.s7.out.fastq"),
		r2 = os.path.join(HECATOMB_DIR, "results", "QC", "step_7", "{sample}_R2.s7.out.fastq"),
		r1Singletons = os.path.join(HECATOMB_DIR, "results", "QC", "step_7", "{sample}_singletons_R1.out.fastq"),
		r2Singletons = os.path.join(HECATOMB_DIR, "results", "QC", "step_7", "{sample}_singletons_R2.out.fastq")
	output:
		r1 = os.path.join("results", "bbnorm", "{sample}_R1.norm.out.fastq"),
		r2 = os.path.join("results", "bbnorm", "{sample}_R2.norm.out.fastq")
	threads: 4
	shell:
		"""
		{BBTOOLS}
		bbnorm.sh \
			in={input.r1} \
			in2={input.r2} \
			extra={input.r1Singletons},{input.r2Singletons} \
			out={output.r1} \
			out2={output.r2} \
			target=20 \
			mindepth=2 \
			t={threads}
		"""

rule megahit:
	"""
	Contig assembly per sample with MEGAHIT
	"""
	input:
		r1 = os.path.join("results", "bbnorm", "{sample}_R1.norm.out.fastq"),
		r2 = os.path.join("results", "bbnorm", "{sample}_R2.norm.out.fastq"),
		r1Singletons = os.path.join(HECATOMB_DIR, "results", "QC", "step_7", "{sample}_singletons_R1.out.fastq"),
                r2Singletons = os.path.join(HECATOMB_DIR, "results", "QC", "step_7", "{sample}_singletons_R2.out.fastq")
	params:
		#directory(os.path.join("results", "megahit", "{sample}"))
	output:
		temp_dir = temp(directory(os.path.join("results", "megahit", "{sample}_TEMP"))), 
		contigs = os.path.join("results", "megahit", "{sample}", "final.contigs.fa")
	shell:
		"""
		{MEGAHIT}
		megahit \
			-1 {input.r1} \
			-2 {input.r2} \
			-r {input.r1Singletons},{input.r2Singletons} \
			-o {output.temp_dir} \
			--verbose

		mv {output.temp_dir}/final.contigs.fa {output.contigs}
		"""

rule rename_contigs:
	"""
	Edit contig headers so each sample has unique contig names with BBTools rename.sh.
	Prevents flye from crashing.
	"""
	input:
		os.path.join("results", "megahit", "{sample}", "final.contigs.fa")
	output:
		os.path.join("results", "renamed_contigs", "{sample}_contigs.fasta")
	shell:
		"""
		{BBTOOLS}
		rename.sh \
			in={input} \
			out={output} \
			prefix={wildcards.sample} \
			addprefix=t
		"""

rule filter_contigs:
	"""
	Filter megahit-assembled contigs to a minimum of 1kb with Seqkit
	"""
	input:
		os.path.join("results", "renamed_contigs", "{sample}_contigs.fasta")
	output:
		os.path.join("results", "filtered_contigs", "{sample}_contigs_1kb.fasta")
	shell:
		"""
		{SEQKIT}
		seqkit \
			seq {input} \
			-m 1000 \
			-o {output}
		"""

rule concatenate_renamed_contigs:
        """
        Concatenate all individual (renamed) contig assemblies into one file for flye.
        Hopefully this prevents issues with samples producing 0 contigs.
        """
        input:
                expand(os.path.join("results", "filtered_contigs", "{sample}_contigs_1kb.fasta"), sample = SAMPLES)
        output:
                os.path.join("results", "concatenated_contigs", "concatenated_contigs_1kb.fasta")
	shell:
		"cat {input} > {output}"

rule assemble_contig_dictionary:
	"""
	Generate contig dictionary with Flye
	"""
	input:
		os.path.join("results", "concatenated_contigs", "concatenated_contigs_1kb.fasta")
	params:
		directory(os.path.join("results", "contig_dictionary"))
	output:
		os.path.join("results", "contig_dictionary", "assembly.fasta")
	threads: 8
	shell:
		"""
		{FLYE}
		flye \
			--subassemblies {input} \
			-o {params} \
			-t {threads} \
			--meta \
			--debug
		"""

rule filter_contig_dictionary:
	"""
	Filter the contigs in the contig dictionary to a minimum of 1kb with Seqkit.
	I'm not sure how it's possible for flye to generate contigs < 1kb considering
	I only gave it files of 1kb contigs but that's what seems to be happening anyway...
	"""
	input:
		os.path.join("results", "contig_dictionary", "assembly.fasta")
	output:
		os.path.join("results", "contig_dictionary", "assembly_1kb.fasta")
	shell:
		"""
		{SEQKIT}
		seqkit \
			seq {input} \
			-m 1000 \
			-o {output}
			"""

rule build_reference:
	"""
	Build reference for BBMap for the quantification by mapping (RPKM step)
	"""
	input:
		os.path.join("results", "contig_dictionary", "assembly_1kb.fasta")
	params:
		#directory(os.path.join("results", "contig_dictionary"))
	output:
		os.path.join("ref", "genome", "1", "summary.txt")
	shell:
		"""
		{BBTOOLS}
		bbmap.sh ref={input}
		"""

rule quantification_by_mapping:
	"""
	Map QC'd reads to contig dictionary with BBMap
	"""
	input:
		r1 = os.path.join(HECATOMB_DIR, "results", "QC", "step_7", "{sample}_R1.s7.out.fastq"),
                r2 = os.path.join(HECATOMB_DIR, "results", "QC", "step_7", "{sample}_R2.s7.out.fastq"),
		summary = os.path.join("ref", "genome", "1", "summary.txt")
	output:
		sam = os.path.join("results", "quantification", "{sample}.aln.sam.gz"),
		rpkm = os.path.join("results", "quantification", "{sample}.rpkm"),
		covstats = os.path.join("results", "quantification", "{sample}.covstats")
	threads: 8
	shell:
		"""
		{BBTOOLS}
		bbmap.sh \
			in={input.r1} \
			in2={input.r2} \
			out={output.sam} \
			rpkm={output.rpkm} \
			covstats={output.covstats} \
			kfilter=22 \
			subfilter=15 \
			maxindel=80 \
			ambiguous=random \
			physcov=t \
			t={threads}
		"""

rule annotate_contig_dictionary:
	"""
	Annotate contig dictionary with CT2
	"""
	input:
		os.path.join("results", "contig_dictionary", "assembly_1kb.fasta")
	params:
		directory(os.path.join("ct2AnnoDict"))
	output:
		os.path.join("ct2AnnoDict", "ct2AnnoDict_CONTIG_SUMMARY.tsv")
	resources:
		mem_mb=32000,
		threads=16
	shell:
		"""
		{CT2}

		python {CT2_PATH}/run_cenote-taker2.py \
			--contigs ./results/contig_dictionary/assembly_1kb.fasta \
			--run_title ct2AnnoDict \
			--template_file {CT2_TEMPLATE} \
			--prune_prophage False \
			--mem 32 \
			--cpu 16 \
			--virus_domain_db standard \
			--circ_minimum_hallmark_genes 0 \
			--lin_minimum_hallmark_genes 1
		"""

rule move_contig_annotations:
	"""
	Move CT2 contig annotations into the results directory.
	"""
	input:
		os.path.join("ct2AnnoDict", "ct2AnnoDict_CONTIG_SUMMARY.tsv")
	params:
		inDir = directory(os.path.join("ct2AnnoDict")),
		outDir = directory(os.path.join("results", "ct2_annotated_contig_dictionary"))
	output:
		os.path.join("results", "ct2_annotated_contig_dictionary", "ct2AnnoDict_CONTIG_SUMMARY.tsv")
	shell:
		"""
		mv {params.inDir}/* {params.outDir}
		rm -rf ct2AnnoContigDict/
		rm -rf ct2AnnoContigDict_*
		"""

rule generate_contig_abundances:
	"""
	Calculate contig abundances from TPM
	"""
	input:
		rpkm = expand(os.path.join("results", "quantification", "{sample}.rpkm"), sample = SAMPLES),
		covstats = expand(os.path.join("results", "quantification", "{sample}.covstats"), sample = SAMPLES)
	output:
		os.path.join("results", "contig_abundance_table", "contig_abundance_table.txt")
	shell:
		"""
		{R}
		Rscript ./workflow/scripts/Generate_Contig_Abundance_Table.R
		"""
